#!/usr/bin/env bash

set -e

DEBUG=${DEBUG:-''}
[ -n "${DEBUG}" ] && set -x

FORCE_LOCAL=${FORCE_LOCAL:-''}
FORCE_REMOTE=${FORCE_REMOTE:-''}
RSYNCOPTS="${RSYNCOPTS:-""}"

# set some vars
SCRIPT_PATH="$(cd $(dirname "$0")/$(dirname "$(readlink "$0")") && pwd)"
JOBNAME="${1:-''}"
LOCKFILE="${SCRIPT_PATH}/lock/cron.lock"
SUBSCRIPT="${SCRIPT_PATH}/jobs/${JOBNAME}"
MAILTO="julian.gieseke@gmail.com"
QUEUETIME=0

# error trap
err_report() {
  echo "errexit on line $(caller)" >&2
}
trap err_report ERR

# exit trap
function teardown {
  EC=$?
  trap - EXIT
  
  if [ ${EC} -ne 0 ]
  then
    echo "❌ Cronjob '${JOBNAME}' 🛑 ${EC} 🗃 ${0} 📅 $(date) 🏁 $(${SCRIPT_PATH}/bin/displaytime $((SECONDS - QUEUETIME)))."
  else
    echo "✅ Cronjob '${JOBNAME}' 📅 $(date) 🏁 $(${SCRIPT_PATH}/bin/displaytime $((SECONDS - QUEUETIME)))."
  fi

  flock --unlock 200
}

# lockfile
exec 200>${LOCKFILE}
flock -w 3600 200 || exit 7
echo $$ 1>&200

trap teardown EXIT SIGINT

# print start
echo -e "\n🎬 Cronjob '${JOBNAME}' 📅 $(date) ⌛️ $(${SCRIPT_PATH}/bin/displaytime ${SECONDS})."
QUEUETIME=${SECONDS}

# some checks
[ -z "${SUBSCRIPT}" ] && { echo "ERROR: No \$SUBSCRIPT given" 1&>2; exit 1; }

# run backup job
${SUBSCRIPT}