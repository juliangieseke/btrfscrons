#!/usr/bin/env bash

# example: 
# /mnt/.bkp/bin/backup-remote /mnt/data.disk/datenteich.share datenteich@192.168.152.11:/mnt/backups.disk/datenteich/ /mnt/backup.disk/datenteich.backups bms

# TODO: https://lincolnloop.com/blog/detecting-file-moves-renames-rsync/

set -e

DEBUG=${DEBUG:-''}
[ -n "${DEBUG}" ] && set -x

# set BASE_PATH
BASE_PATH="$(cd $(dirname "$0")/$(dirname "$(readlink "$0")") && cd .. && pwd)"

SRC="${1:-''}"
DST_REMOTE="${2:-''}"
DST_REMOTE_BACKUPDIR="${3:-''}"
VPN_CONF="${4:-''}"
DST_USER="$(echo "${DST_REMOTE}" | cut -d@ -f1)"
DST_HOST="$(echo "${DST_REMOTE}" | cut -d@ -f2 | cut -d: -f1)"
RSYNCOPTS="${RSYNCOPTS:-""}"
VPN_CONNECTED=0

# exit trap
function teardown {
  # echo "connected? ${VPN_CONNECTED}, teardown arguments: $@"
  trap - EXIT
  if [ ${VPN_CONNECTED} -eq 1 ]
  then
    /usr/sbin/vpnc-disconnect 2>&1 >/dev/null || true
  fi
  flock --unlock 200 || exit 201
}

# setup lockfile - unlock in trap
exec 200>"${BASE_PATH}/lock/backup-remote.lock"
flock -n 200 || exit 200
echo $$ 1>&200

# connecting to VPN - disconnect in trap
if /usr/sbin/vpnc-connect ${VPN_CONF}
then
  echo "Connected to VPN (${VPN_CONF})"
  VPN_CONNECTED=1
else
  echo "ERROR: Failed to connect to VPN (${VPN_CONF})" 1>&2
fi

# setup trap
trap teardown EXIT SIGINT

# build options
if [ -n "${DST_REMOTE_BACKUPDIR}" ]
then
  RSYNCOPTS="${RSYNCOPTS} --protect-args --backup --backup-dir=${DST_REMOTE_BACKUPDIR%/}/$(date +%F-%H-%M-%S)/"
fi
RSYNCOPTS="${RSYNCOPTS} --partial --compress"

# run rsync backup
RSYNCOPTS="${RSYNCOPTS}" ${BASE_PATH}/bin/backup-rsync "${SRC}" "${DST_REMOTE}"

# remove locally deleted files on remote after 90 days
[ -n "${DST_REMOTE_BACKUPDIR}" ] \
  && ssh ${DST_USER}@${DST_HOST} \
    find "${DST_REMOTE_BACKUPDIR}" -mindepth 1 -maxdepth 1 -type d -ctime 90 -exec "echo Deleting remote backup directory '{}' \;" -exec "rm -rf '{}' \;"
